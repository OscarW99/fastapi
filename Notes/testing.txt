- We use the assert command for testing.
- Testing file must be named *_test or test_* to be auto found.
- Testing (assert) functions must be named test*
- We import functions from other files in our app folder to a testing file in the testing folder and write assert functions in the testing file that call those functions with expected answers.

# To run pytest
pytest
pytest -v

# To run pytest with print statements
pytest -v -s
pytest -v -s folder/specific_test_file.py

# To remove warnings
pytest --disable-warnings -v

# To get pytest to stop at the first error (can be useful in bigger projects when testing takes a long time).
pytest -x
pytest -v -x

- A fixture is a function that gets run before the tests and can be used to create a class instance that will be used in multiple tests. To use it in a test, include it as a parameter in the test function.
- You can use both fixtures and parameterize decorators togther on a test function.

You create seperate test functions to test for exceptions - where you expect errors to occur.

'In Python we usually write our own exception classes' - Didn't know this...Need to look into this as a seperate topic


Fastapi provides its own test client - a subpackage that makes testing easy
This test client is basically a requests object (from python requests library). It just automating the sending of requests that we would do in thunderclient.

We use a test database to avoid mixing our production data and testing data.
My test database is currently on my local machine. I can have my test database in a docker env or on a remote machine, it doesn't matter. I just need to set the database address to account for this.

Tests should be independant from each other. You should not have a test that relys on another test to run as this can cause confusion to where an error is coming from. An example of where we may need this is when we need to test the login function but we need to run create_user before this.
To combat this problem, we can create a fixture that will create the user for us. A fixture can actually have assert statements itself.
A fixture is basically just a dependency to run a test.

conftest.py is a special pytest file that can hold all of the fixtures that will be used by multiple test files. We put our database fixtures in here. By using conftest, we don't need to import our fixtures into the test files. This will be done automatically.
You can have multiple conftest.py files (e.g. in testing subdirectories) only the testing files in the directory (or subdirectories) of a specific conftest.py file will be able to access its fixtures. So no conftest.py file can act in test directories above itself.