DigitalOcean is an infastructure as a service provider. It provides a cloud environment where you can host you website and database and also manages user traffic. They charge a monthly fee.
Like we would do on our own laptop, we can install software onto the server as we are the root user (owner).
##
ssh owright@143.244.157.61
source app/venv/bin/activate
http://143.244.157.61:8000/
##
## To login to digital ocean, need to login with google on broad chrome browser.
# ssh into ubuntu server using same method as broad.
ssh root@143.244.157.61
# make sure ubuntu is up to date....
sudo apt update && sudo apt upgrade -y

# install extra packages we require -> e.g. pip...
sudo apt install python3-pip

# we now use pip to install virtual env
sudo pip3 install virtualenv

# install database stuff (using default port)
sudo apt install postgresql postgresql-contrib -y

# Next connect to database from ubuntu VM
# We use postgres CLI called psql which we installed with the above command 
#|v| use postgres as username as this is the auto installed postgres user (and database) -> but we are currently root so we need to change the the postgres user that was auto installed with postgres.
psql --version
psql --help
sudo cat /etc/passwd # check available users
su - postgres # change to postgres user
psql -U postgres # login to database

# WHEN IN DATABASE
# create new password for user
\password postgres
# exit out of postgres
\q


# Go back to root user
exit

# to modify postgres configs (configs will normally be in etc directory in root)
cd /etc/postgresql/12/main
sudo nano postgresql.conf
# note local host on this ubuntu server is not the same as localhost on my laptop. The VM has a seperate localhost.
# go to 'CONECTIONS AND AUTHENTICATIONS' --> 'listen_addresses' --> edit to allow all IP addresses to connect...
listen_addresses = '*'
# Its best practice to narrow down the IPaddreses' and domains that can access your database fo security reasons.
# now change PostgreSQL Client Authentication Configuration File
# We want to change peer authentication to password authentication ('md5'), also dtabase access and IPs able to acceess through 1Pv4 and IPv6
sudo nano pg_hba.conf #(see Ubuntu_client_auth_config_file.PNG for edits)
# restart application for changes to take affect.
systemctl restart postgresql

##
psql -U postgres # login to database, Dont have to switch users anymore as I have changed settings.
\q

##############################################
# You generally dont want to be root user for security reasons. Ie is you start you apllication with rrot user, you are giving the application root access to your machine which is risky.
# We will create a non-root user with root privellages.
adduser owright
su - owright

# You can actually login straight to the new user now...
ssh owright@143.244.157.61

# user by default doesn't have root (sudo) privallages.
# we log back in as root user then give our new user these privaleges.
exit
ssh root@143.244.157.61
usermod -aG sudo owright

# our homme directory is 'usermod -aG sudo owright'. This is where we will put our app directory.
cd ~
mkdir app
cd app

# We create a virtual environment inside our app folder....
#... It makes sense we do this, just like we would do on our own laptop. We want a different virtual_env for each app as each will require different dependencies and have different software versions for each.
virtualenv venv
# activate venv
source venv/bin/activate # use 'deactivate' to get out of venv

# now create source folder to store our app code
mkdir src
cd src
# We will copy all of our code into src from github.. (Note the respoitory has to be public for this to work...Im sure theres a way around this though as surley you dont want to make you app source code public.)
git clone https://github.com/OscarW99/fastapi.git . 
#(The space and dot at the end will paste contents of fastapi directory into the current directory instead of adding the fastapi folder inside the current folder)(because there basically no need to have a folder inside another folder).

# Install all requiremnets...
pip install -r requirements.txt
# ran into error installing psycopg2
# exiting venv and instally required software
deactivate
sudo apt install libpq-dev
# I may come into problems like this in the future related to other dependencies. I just need to find the specific solution.

source ../venv/bin/activate
pip install -r requirements.txt

#! skip to next red (v = demonstration of trial + error)
# Next we are going to set up our environment varibales before running our app
# to create environmrnt variable on linux machine...
export VAR_NAME=name # example only
printenv # this will print all environment variables
unset VAR_NAME # this will remove the environment variable

# We will create a file of environment variables so we dont have to add them one by one.
cd ~
touch .env #create file
nano .env #add vars to file (use same format (export VAR_NAME=name))
source .env # This will run the .env file as if it were a set of commands.(Useful to know actually)
# Note: It is important the .env file is not in our app folder so theres no risk of it being published to github.
#-------vvvvvvvvvvvvvvvvvvvvvvvvvv--------#
# Actully there is a simpler way. We can copy and paste our env variables from our development environment into the .env file and then run one command from the CLI to add them all as environment variables.
# Remember environemnt variables are in the format... DATABASE_PORT=1234
set -o allexport; source ~/.env; set +o allexport
sudo reboot # reboot VM.
# We see that environment variables are not kept after reeboot, so we need to do somthing about this.
#!
# There is a simple fix.
# the hidden '.profile' file in the home direcotry is a file thats run every time automatically upon login. We can paste the command to set environment variables in to the bottom of this file...
cd ~
nano .profile
set -o allexport; source ~/.env; set +o allexport # add this to bottom of file
# Note: there are 100 ways to set environment variables, this is just one.

# Now go into postgres and create fastapi database inside fastapi_prod server
# now edit .env file variables so they match production env variables instaed of development env varibales.
#.. we still use localhost because the ubuntu machine is the localhost of the server.

# Now to actually create tables in fastapi database in fastapi-prod server...
# go into alembic folder and run alembic command. #REMEMBER..  never run alembic revisions on production server.
cd ~/app/src
alembic upgrade head
# we can still roll back to previous versions as all our revisions are saved.

# Now we can run our app (dont include reload commad)(we need to include host parameter so that we can listen on any IP including from our loacl laptop.).
uvicorn --host 0.0.0.0 app.main:app

# Note: you only need to clone a repository once, after that you can use 'git pull' to get any updates.
# Ok some slight confusion with connecting to the server from my webbrowser. What did it in the end was to go to the url... 'http://143.244.157.61:8000/'
# ... This is the IP address of my server folowed by :8000

# If our server crahes or we reboot, our app will not automatically restart - we dont want this.
# We can use a process manager called gunicorn to solve this problem
pip install gunicorn #do this inside venv
pip install httptools
pip install uvloop
# Im actually going to now manually update requirements.txt so that these packages are installed for future. I'll use pip freeze and paste this into requirements.txt in the dev environment.

# We can set the number of workers for gunicorn. This is the number of cpus listening for requests. If we set multiple workers then a load balancer will be implemented to share traffic accross all of them.
# We can check the number of cpus with the 'lscpu' command. I have 4.
gunicorn -w 4 -k uvicorn.workers.UvicornWorker app.main:app --bind 0.0.0.0:8000
# ps -aef | grep -i gunicorn

# Next we want to make out app run in the background and also have it automatically start on reboot.
# We create a service to start the app for us...
# ... copy and pasted into gunicorn.service file in app folder (vscode)
cd /etc/systemd/system
# create file named after what you want the service to be called
sudo nano api.service
# ...paste the contents of gunicorn.service into here
# test out service
systemctl start api
systemctl status api
systemctl restart api

#!!
You fing kidding me.
https://stackoverflow.com/questions/7695962/password-authentication-failed-for-user-postgres/7696398#7696398
local all postgres ident
#!!