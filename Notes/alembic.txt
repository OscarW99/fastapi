Alembic works a bit like git in the sense you can track changes ans revert back to previous states.
The versions folder in the alembic folder will contain all of these.
revision tracks the changes that we make (-m command is where you write commit messgae)
[ because im not using a virtual env, i need to write an extra 'python -m' in front of every command ]

#* create revision
python -m alembic revision -m "create posts table"

#* YOU THEN NEED TO MANUALLY POPULATE THE UPGRADE AND DOWNGRADE FUNCTIONS #

#* get current revision
python -m alembic current

#* get latest revision
python -m alembic heads

#* upgrade to revision
python -m alembic upgrade 2218f62f08f1
...can also set head instead of ID here as head is th ecurrent version

#* downgrade to revision
python -m alembic downgrade 2218f62f08f1
# can also use number to go back a certain number of revisions...(same for upgrade)
# downgrade by 2 revision
python -m alembic downgrade -2

# We can use models defined in models.py to generate/update columns automatically...
python -m alembic revision --autogenerate -m ""
# ... this is brilliant as it automatically populates the upgrade and downgrade functions.